/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef first_TYPES_H
#define first_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




class req_struct;

class rsp_struct;

typedef struct _req_struct__isset {
  _req_struct__isset() : nickname(false) {}
  bool nickname :1;
} _req_struct__isset;

class req_struct {
 public:

  req_struct(const req_struct&);
  req_struct& operator=(const req_struct&);
  req_struct() : uid(0), nickname() {
  }

  virtual ~req_struct() throw();
  int64_t uid;
  std::string nickname;
  std::vector<int64_t>  nums;

  _req_struct__isset __isset;

  void __set_uid(const int64_t val);

  void __set_nickname(const std::string& val);

  void __set_nums(const std::vector<int64_t> & val);

  bool operator == (const req_struct & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (__isset.nickname != rhs.__isset.nickname)
      return false;
    else if (__isset.nickname && !(nickname == rhs.nickname))
      return false;
    if (!(nums == rhs.nums))
      return false;
    return true;
  }
  bool operator != (const req_struct &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const req_struct & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(req_struct &a, req_struct &b);

inline std::ostream& operator<<(std::ostream& out, const req_struct& obj)
{
  obj.printTo(out);
  return out;
}


class rsp_struct {
 public:

  rsp_struct(const rsp_struct&);
  rsp_struct& operator=(const rsp_struct&);
  rsp_struct() : uid(0), total(0) {
  }

  virtual ~rsp_struct() throw();
  int64_t uid;
  int64_t total;

  void __set_uid(const int64_t val);

  void __set_total(const int64_t val);

  bool operator == (const rsp_struct & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    if (!(total == rhs.total))
      return false;
    return true;
  }
  bool operator != (const rsp_struct &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rsp_struct & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(rsp_struct &a, rsp_struct &b);

inline std::ostream& operator<<(std::ostream& out, const rsp_struct& obj)
{
  obj.printTo(out);
  return out;
}



#endif
