/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "first_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




req_struct::~req_struct() throw() {
}


void req_struct::__set_uid(const int64_t val) {
  this->uid = val;
}

void req_struct::__set_nickname(const std::string& val) {
  this->nickname = val;
__isset.nickname = true;
}

void req_struct::__set_nums(const std::vector<int64_t> & val) {
  this->nums = val;
}

uint32_t req_struct::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_uid = false;
  bool isset_nums = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->uid);
          isset_uid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->nickname);
          this->__isset.nickname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->nums.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->nums.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readI64(this->nums[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          isset_nums = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_uid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_nums)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t req_struct::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("req_struct");

  xfer += oprot->writeFieldBegin("uid", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->uid);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.nickname) {
    xfer += oprot->writeFieldBegin("nickname", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->nickname);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("nums", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->nums.size()));
    std::vector<int64_t> ::const_iterator _iter5;
    for (_iter5 = this->nums.begin(); _iter5 != this->nums.end(); ++_iter5)
    {
      xfer += oprot->writeI64((*_iter5));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(req_struct &a, req_struct &b) {
  using ::std::swap;
  swap(a.uid, b.uid);
  swap(a.nickname, b.nickname);
  swap(a.nums, b.nums);
  swap(a.__isset, b.__isset);
}

req_struct::req_struct(const req_struct& other6) {
  uid = other6.uid;
  nickname = other6.nickname;
  nums = other6.nums;
  __isset = other6.__isset;
}
req_struct& req_struct::operator=(const req_struct& other7) {
  uid = other7.uid;
  nickname = other7.nickname;
  nums = other7.nums;
  __isset = other7.__isset;
  return *this;
}
void req_struct::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "req_struct(";
  out << "uid=" << to_string(uid);
  out << ", " << "nickname="; (__isset.nickname ? (out << to_string(nickname)) : (out << "<null>"));
  out << ", " << "nums=" << to_string(nums);
  out << ")";
}


rsp_struct::~rsp_struct() throw() {
}


void rsp_struct::__set_uid(const int64_t val) {
  this->uid = val;
}

void rsp_struct::__set_total(const int64_t val) {
  this->total = val;
}

uint32_t rsp_struct::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_uid = false;
  bool isset_total = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->uid);
          isset_uid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->total);
          isset_total = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_uid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_total)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t rsp_struct::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("rsp_struct");

  xfer += oprot->writeFieldBegin("uid", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->uid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("total", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->total);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(rsp_struct &a, rsp_struct &b) {
  using ::std::swap;
  swap(a.uid, b.uid);
  swap(a.total, b.total);
}

rsp_struct::rsp_struct(const rsp_struct& other8) {
  uid = other8.uid;
  total = other8.total;
}
rsp_struct& rsp_struct::operator=(const rsp_struct& other9) {
  uid = other9.uid;
  total = other9.total;
  return *this;
}
void rsp_struct::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "rsp_struct(";
  out << "uid=" << to_string(uid);
  out << ", " << "total=" << to_string(total);
  out << ")";
}


