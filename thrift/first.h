/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef first_H
#define first_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "first_types.h"



#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class firstIf {
 public:
  virtual ~firstIf() {}
  virtual void ping() = 0;
  virtual int64_t add(const int64_t x, const int64_t y) = 0;
  virtual void connect(std::string& _return, const std::string& first, const std::string& second) = 0;
  virtual void structure(rsp_struct& _return, const req_struct& req) = 0;
};

class firstIfFactory {
 public:
  typedef firstIf Handler;

  virtual ~firstIfFactory() {}

  virtual firstIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(firstIf* /* handler */) = 0;
};

class firstIfSingletonFactory : virtual public firstIfFactory {
 public:
  firstIfSingletonFactory(const boost::shared_ptr<firstIf>& iface) : iface_(iface) {}
  virtual ~firstIfSingletonFactory() {}

  virtual firstIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(firstIf* /* handler */) {}

 protected:
  boost::shared_ptr<firstIf> iface_;
};

class firstNull : virtual public firstIf {
 public:
  virtual ~firstNull() {}
  void ping() {
    return;
  }
  int64_t add(const int64_t /* x */, const int64_t /* y */) {
    int64_t _return = 0;
    return _return;
  }
  void connect(std::string& /* _return */, const std::string& /* first */, const std::string& /* second */) {
    return;
  }
  void structure(rsp_struct& /* _return */, const req_struct& /* req */) {
    return;
  }
};


class first_ping_args {
 public:

  first_ping_args(const first_ping_args&);
  first_ping_args& operator=(const first_ping_args&);
  first_ping_args() {
  }

  virtual ~first_ping_args() throw();

  bool operator == (const first_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const first_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const first_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class first_ping_pargs {
 public:


  virtual ~first_ping_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class first_ping_result {
 public:

  first_ping_result(const first_ping_result&);
  first_ping_result& operator=(const first_ping_result&);
  first_ping_result() {
  }

  virtual ~first_ping_result() throw();

  bool operator == (const first_ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const first_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const first_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class first_ping_presult {
 public:


  virtual ~first_ping_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _first_add_args__isset {
  _first_add_args__isset() : x(false), y(false) {}
  bool x :1;
  bool y :1;
} _first_add_args__isset;

class first_add_args {
 public:

  first_add_args(const first_add_args&);
  first_add_args& operator=(const first_add_args&);
  first_add_args() : x(0), y(0) {
  }

  virtual ~first_add_args() throw();
  int64_t x;
  int64_t y;

  _first_add_args__isset __isset;

  void __set_x(const int64_t val);

  void __set_y(const int64_t val);

  bool operator == (const first_add_args & rhs) const
  {
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    return true;
  }
  bool operator != (const first_add_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const first_add_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class first_add_pargs {
 public:


  virtual ~first_add_pargs() throw();
  const int64_t* x;
  const int64_t* y;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _first_add_result__isset {
  _first_add_result__isset() : success(false) {}
  bool success :1;
} _first_add_result__isset;

class first_add_result {
 public:

  first_add_result(const first_add_result&);
  first_add_result& operator=(const first_add_result&);
  first_add_result() : success(0) {
  }

  virtual ~first_add_result() throw();
  int64_t success;

  _first_add_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const first_add_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const first_add_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const first_add_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _first_add_presult__isset {
  _first_add_presult__isset() : success(false) {}
  bool success :1;
} _first_add_presult__isset;

class first_add_presult {
 public:


  virtual ~first_add_presult() throw();
  int64_t* success;

  _first_add_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _first_connect_args__isset {
  _first_connect_args__isset() : first(false), second(false) {}
  bool first :1;
  bool second :1;
} _first_connect_args__isset;

class first_connect_args {
 public:

  first_connect_args(const first_connect_args&);
  first_connect_args& operator=(const first_connect_args&);
  first_connect_args() : first(), second() {
  }

  virtual ~first_connect_args() throw();
  std::string first;
  std::string second;

  _first_connect_args__isset __isset;

  void __set_first(const std::string& val);

  void __set_second(const std::string& val);

  bool operator == (const first_connect_args & rhs) const
  {
    if (!(first == rhs.first))
      return false;
    if (!(second == rhs.second))
      return false;
    return true;
  }
  bool operator != (const first_connect_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const first_connect_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class first_connect_pargs {
 public:


  virtual ~first_connect_pargs() throw();
  const std::string* first;
  const std::string* second;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _first_connect_result__isset {
  _first_connect_result__isset() : success(false) {}
  bool success :1;
} _first_connect_result__isset;

class first_connect_result {
 public:

  first_connect_result(const first_connect_result&);
  first_connect_result& operator=(const first_connect_result&);
  first_connect_result() : success() {
  }

  virtual ~first_connect_result() throw();
  std::string success;

  _first_connect_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const first_connect_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const first_connect_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const first_connect_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _first_connect_presult__isset {
  _first_connect_presult__isset() : success(false) {}
  bool success :1;
} _first_connect_presult__isset;

class first_connect_presult {
 public:


  virtual ~first_connect_presult() throw();
  std::string* success;

  _first_connect_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _first_structure_args__isset {
  _first_structure_args__isset() : req(false) {}
  bool req :1;
} _first_structure_args__isset;

class first_structure_args {
 public:

  first_structure_args(const first_structure_args&);
  first_structure_args& operator=(const first_structure_args&);
  first_structure_args() {
  }

  virtual ~first_structure_args() throw();
  req_struct req;

  _first_structure_args__isset __isset;

  void __set_req(const req_struct& val);

  bool operator == (const first_structure_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const first_structure_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const first_structure_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class first_structure_pargs {
 public:


  virtual ~first_structure_pargs() throw();
  const req_struct* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _first_structure_result__isset {
  _first_structure_result__isset() : success(false) {}
  bool success :1;
} _first_structure_result__isset;

class first_structure_result {
 public:

  first_structure_result(const first_structure_result&);
  first_structure_result& operator=(const first_structure_result&);
  first_structure_result() {
  }

  virtual ~first_structure_result() throw();
  rsp_struct success;

  _first_structure_result__isset __isset;

  void __set_success(const rsp_struct& val);

  bool operator == (const first_structure_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const first_structure_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const first_structure_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _first_structure_presult__isset {
  _first_structure_presult__isset() : success(false) {}
  bool success :1;
} _first_structure_presult__isset;

class first_structure_presult {
 public:


  virtual ~first_structure_presult() throw();
  rsp_struct* success;

  _first_structure_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class firstClient : virtual public firstIf {
 public:
  firstClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  firstClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  void send_ping();
  void recv_ping();
  int64_t add(const int64_t x, const int64_t y);
  void send_add(const int64_t x, const int64_t y);
  int64_t recv_add();
  void connect(std::string& _return, const std::string& first, const std::string& second);
  void send_connect(const std::string& first, const std::string& second);
  void recv_connect(std::string& _return);
  void structure(rsp_struct& _return, const req_struct& req);
  void send_structure(const req_struct& req);
  void recv_structure(rsp_struct& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class firstProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<firstIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (firstProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_add(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_connect(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_structure(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  firstProcessor(boost::shared_ptr<firstIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &firstProcessor::process_ping;
    processMap_["add"] = &firstProcessor::process_add;
    processMap_["connect"] = &firstProcessor::process_connect;
    processMap_["structure"] = &firstProcessor::process_structure;
  }

  virtual ~firstProcessor() {}
};

class firstProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  firstProcessorFactory(const ::boost::shared_ptr< firstIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< firstIfFactory > handlerFactory_;
};

class firstMultiface : virtual public firstIf {
 public:
  firstMultiface(std::vector<boost::shared_ptr<firstIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~firstMultiface() {}
 protected:
  std::vector<boost::shared_ptr<firstIf> > ifaces_;
  firstMultiface() {}
  void add(boost::shared_ptr<firstIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    ifaces_[i]->ping();
  }

  int64_t add(const int64_t x, const int64_t y) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add(x, y);
    }
    return ifaces_[i]->add(x, y);
  }

  void connect(std::string& _return, const std::string& first, const std::string& second) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->connect(_return, first, second);
    }
    ifaces_[i]->connect(_return, first, second);
    return;
  }

  void structure(rsp_struct& _return, const req_struct& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->structure(_return, req);
    }
    ifaces_[i]->structure(_return, req);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class firstConcurrentClient : virtual public firstIf {
 public:
  firstConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  firstConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  int32_t send_ping();
  void recv_ping(const int32_t seqid);
  int64_t add(const int64_t x, const int64_t y);
  int32_t send_add(const int64_t x, const int64_t y);
  int64_t recv_add(const int32_t seqid);
  void connect(std::string& _return, const std::string& first, const std::string& second);
  int32_t send_connect(const std::string& first, const std::string& second);
  void recv_connect(std::string& _return, const int32_t seqid);
  void structure(rsp_struct& _return, const req_struct& req);
  int32_t send_structure(const req_struct& req);
  void recv_structure(rsp_struct& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif



#endif
